1. Lots Page
    - STATUS
        - Make status more dymamic
        - Find a way for status to be updated automatically without refreshing the page and user input
        - Options: A queueable job
        - Create a job that will update the status of a lot to live after the start time has been reached
        <?php

        namespace App\Jobs;

        use App\Models\Lot;
        use Illuminate\Bus\Queueable;
        use Illuminate\Contracts\Queue\ShouldQueue;
        use Illuminate\Foundation\Bus\Dispatchable;
        use Illuminate\Queue\InteractsWithQueue;
        use Illuminate\Queue\SerializesModels;

        class UpdateLotStatus implements ShouldQueue
        {
            use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;

            protected Lot $lot;

            public function __construct(Lot $lot)
            {
                $this->lot = $lot;
            }

            public function handle()
            {
                $this->lot->update(['status' => 'live']);
            }
        }
        }

        $lot = Lot::find($id);
        $auctionDateTime = $lot->auction_date; // assuming it's a datetime object
        UpdateLotStatus::dispatch($lot)->delay($auctionDateTime->diffInSeconds(now()));

        - For when the auction is over, create a job that will update the status of a lot to pending

        <?php

        namespace App\Jobs;

        use App\Models\Lot;
        use Illuminate\Bus\Queueable;
        use Illuminate\Contracts\Queue\ShouldQueue;
        use Illuminate\Foundation\Bus\Dispatchable;
        use Illuminate\Queue\InteractsWithQueue;
        use Illuminate\Queue\SerializesModels;

        class EndLotAuction implements ShouldQueue
        {
            use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;

            protected Lot $lot;

            public function __construct(Lot $lot)
            {
                $this->lot = $lot;
            }

            public function handle()
            {
                $this->lot->update(['status' => 'pending']);
            }
        }
        }

        $lot = Lot::find($id);
        $auctionEndDateTime = $lot->auction_end_date; // assuming it's a datetime object
        EndLotAuction::dispatch($lot)->delay($auctionEndDateTime->diffInSeconds(now()));
